from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect
from django.http import HttpResponse
from django.core import serializers
from django.utils import simplejson

from fitness.members.models import *
from fitness.exercises.models import *
from fitness.template_editor.models import *

def fetch_exercises (request):
# Fetches exercise types from database and formats them into a JSON string for the template editor
# TODO: How to maximize efficiency with this sort of function
# TODO: All 'name' values should be changed to 'id'
#    json = '['
#    json = ''
    ls = []
    json_slzr = serializers.get_serializer("json")()
    muscle_entity_list = MuscleEntity.objects.filter(primary=True)
    for muscle_entity in muscle_entity_list:
        et = ExerciseType.objects.filter(muscle_entities=muscle_entity.id)
#        print muscle_group.name, '[', muscle_group.id, '] : ', et
        # The ManyToManyField in ExerciseType (that refers to MuscleGroup) causes problems for simplejson
        # TODO: Possible fix or bug report for the above problem?
#        for type in et:
#            type.muscle_groups.clear()
        elist = []
        for exercise in et:
            elist.append(exercise.name)
        dict = { 
            'name': muscle_entity.name,
            'list': elist
            }
        #ExerciseType.objects.filter(muscle_groups=muscle_group.id)
        # json_slzr.serialize(ExerciseType.objects.filter(muscle_groups=muscle_group.id))
        ls.append(dict)

    return compile_json_response(request, ls)

#     body = simplejson.dumps(ls)
    
#     if 'callback' in request.GET:
#         body = ('%s(%s);' % (request.GET['callback'], body))

#     response = HttpResponse(body)

#     response['Content-Type'] = 'text/javascript'
#     response['Content-Length'] = len(body)
#     response['Expires'] = -1
#     response['Cache-Control'] = 'no-cache'
#     response['Pragma'] = 'no-cache'

#     print body
    
#     return response
#    return HttpResponse(simplejson.dumps(ls), mimetype='application/javascript')
#    return simplejson.dumps(ls)

# """
#     json_slzr.serialize(MuscleGroup.objects.all())

#     muscle_groups = MuscleGroup.objects.all()
# #    for muscle_group in muscle_groups:
#         json+='\t{'
#         json+='\t\t\'name\': ' + muscle_group.name + ','
#         json+='\t\t\'list\': '
#         json+='\t\t\t['
#         exercise_list = ExerciseType.objects.all()
#         for (exercise in exercise_list):
#             json+='\t\t\t'+exercise.name+','
#         json+='\t\t\t],'
#         json+='\t}'
#     json+=']'
#     print json
# """

# TODO: Change the output mechanisms of these views to whatever is most "appropriate"
# (not necessarily always render_to_response)
def index (request, member_id):
    # use proper httpresponse
    return render_to_response('template_editor/builder.html', { 'member_id': member_id })

def save (request, member_id):

    print "Request: ", request
#    print "member id: ", member_id

    exercise_list = request.GET.getlist('exercise_list[]')
    warmup_sets_list = request.GET.getlist('warmup_sets_list[]')
    warmup_reps_list = request.GET.getlist('warmup_reps_list[]')
    workout_sets_list = request.GET.getlist('workout_sets_list[]')
    workout_sets_list = request.GET.getlist('workout_reps_list[]')
    tempo_list = request.GET.getlist('tempo_list[]')
    rest_list = request.GET.getlist('rest_list[]')

    print "exercise_list: ", exercise_list

    if exercise_list:

        template_collection = TemplateCollection(
            name = 'Placeholder',
            author = Member.objects.get(id=member_id)
            )

        template_collection.save()

        print "Template collection: ", template_collection

        # These will be "singleton" templates for the time being until the time
        # allocation is sorted out
        # TODO: Assign positions correctly
        workout_template = WorkoutTemplate(
            collection = template_collection,
            position = 1
            )

        workout_template.save()
        
        print "Workout template: ", workout_template

        index=0
        for exercise in exercise_list:
            print "exercise #", index
            exercise_template = ExerciseTemplate(
                workout_template = workout_template,
                position = index,
                )
            exercise_template.save()
            lift_template = LiftTemplate(
                workout_template = workout_template,
                exercise_template = exercise_template,
                type = ExerciseType.objects.get(name=exercise), #request.GET['exercise_type_id']),
                warmup_sets = warmup_sets_list[index],
                warmup_reps = warmup_reps_list[index],
                workout_sets = workout_sets_list[index],
                workout_reps = warmup_reps_list[index],
                tempo = tempo_list[index],
                rest = rest_list[index],
                )
            lift_template.save()
            index+=1


#        return HttpResponseRedirect('/workout/profile/1/?success')
        return compile_json_response(request, [{ 'feedback': "Success" }] )

    else:

        # TODO: Do something here
#        return HttpResponseRedirect('/workout/profile/1/?failure')
    
        return compile_json_response(request, [{ 'feedback': "Failed" }] )

def compile_json_response(request, json):

    body = simplejson.dumps(json)
    
    if 'callback' in request.GET:
        body = ('%s(%s);' % (request.GET['callback'], body))

    response = HttpResponse(body)

    response['Content-Type'] = 'text/javascript'
    response['Content-Length'] = len(body)
    response['Expires'] = -1
    response['Cache-Control'] = 'no-cache'
    response['Pragma'] = 'no-cache'

    print body
    
    return response
